function vs(listenPort)% Stimulation program%% vs talks to zpep or mpep through the UDP port and displays stimuli% and plays waves.%% vs(ListenPort) lets you specify what port to listen to. DEFAULT: [],% which means 1005. (Notice that up to 3 Dec 2013 the port was 1001).%% It relies on RigInfoGet to determine all sorts of attributes of your rig.%% Part of the Stimulus toolbox% 2011-02 Matteo Carandini derived from the older vs% 2012-02 MC tweaked deadTime and replaced a findstr with a strfind% 2012-07 MC added 't' option on menu (was already there but invisible)% 2013-12 MC added option to specify listenPort, set it to 1005 (from 1001)if nargin<1    listenPort = [];end    %% basic informationpnet('CloseAll'); % to be safe% suppress all the greetings and warningsoldVisualDebugLevel = Screen('Preference', 'VisualDebugLevel', 3);oldSupressAllWarnings = Screen('Preference', 'SuppressAllWarnings', 1);daqreset; % this is importantRigInfo = RigInfoGet;if isempty(listenPort)    listenPort = 1005; % used to be 1001endconfirmPort = 1102; SetDefaultDirs; if isempty(DIRS.stimInfo) || ~ischar(DIRS.stimInfo)    error('What is the DIRS.stimInfo?');endif ~exist(DIRS.stimInfo,'dir')    error([DIRS.stimInfo ' is not a directory']);end%% Startclc;disp('************** VS: Visual and waveform stimulation *********');disp(' ');% wait until all keys are released.while KbCheck;end;% Open a screen and other initializations myScreenInfo = ScreenInfo(RigInfo);% load new gamma table, which linearizes monitor luminancemyScreenInfo = myScreenInfo.CalibrationLoad;%% confirm that the distance is what is desired% myScreenInfo.Dist = [];% while isempty(myScreenInfo.Dist)%     strQuery = sprintf('Screen distance in cm [%3.1f]: ',RigInfo.DefaultMonitorDistance);%     Dist = input(strQuery);%     if isnumeric(Dist)%         if isempty(Dist)%             myScreenInfo.Dist = RigInfo.DefaultMonitorDistance;%         else%             myScreenInfo.Dist = Dist;%         end%     end% end%% Create the WaveInfo: open the DAQ communication% commented out by Matteo on 2013 Dec 12% if ~isempty(RigInfo.WaveInfo.DAQAdaptor)%     SampleRate = 10000; % Hz%     %     WaveInfo.ai = analoginput(RigInfo.WaveInfo.DAQAdaptor,RigInfo.WaveInfo.DAQString) ;%     addchannel(WaveInfo.ai,0:1); % adds two channels%     WaveInfo.ai.Channel.InputRange = [-10 10]; % apparently I can't do [0 10]%     set(WaveInfo.ai,'InputType','SingleEnded');%     set(WaveInfo.ai,'SampleRate',SampleRate);%     set(WaveInfo.ai,'SamplesPerTrigger',Inf);%     set(WaveInfo.ai,'TriggerType','Manual');% %     WaveInfo.do = digitalio(RigInfo.WaveInfo.DAQAdaptor,RigInfo.WaveInfo.DAQString);%     addline(WaveInfo.do,0,'out');%     % set(WaveInfo.do,'TriggerType','Manual');% %     start(WaveInfo.ai);%     start(WaveInfo.do);% %     % AT SOME POINT LATER WE WILL HAVE TO DO THIS STUFF% %     stop(WaveInfo.ai);% %     stop(WaveInfo.do);% %     delete(WaveInfo.ai); clear ai% %     delete(WaveInfo.do); clear do% % end%% warm things upNoSyncSquare = myScreenInfo.SyncSquare;NoSyncSquare.Type = 'None';% make an initial stimulus to load relevant instructions in RAMStim = ScreenStim.Make(myScreenInfo,'vdriftsin100',[10 20 20 50 30 0 0 200]);fprintf('Playing a test stimulus twice\n');Play(Stim,myScreenInfo,NoSyncSquare);Play(Stim,myScreenInfo,NoSyncSquare);%% Instructionsshowinstructions(myScreenInfo); %% Initializations% the array that will hold the saved stimuli SavedStims = ScreenStim;  SavedStims(end) = [];% the flags that wil keep track of the stateflag.running 			= 1;flag.stiminitialized 	= 0;flag.stimmake 			= 0;% other variablesgrat = []; % this will contain the output of search stim%% start UDP communicationglobal UDPincoming		% UDP string deposited in this globalUDPincoming = '';		% clear anything that might be left overSenderPort  = pnet('udpsocket', confirmPort);ReceiverPort= pnet('udpsocket', listenPort);pnet(SenderPort,'udpconnect',RigInfo.zpepComputerIP,confirmPort);fprintf(1,'Opened UDP line, awaiting input from zpep (or mpep) on %s\n',RigInfo.zpepComputerName);%% loop starts, until end of expListenChar(2);	% don't echo keypresses to matlab screenring = wavread('ringin.wav');oRingRing = audioplayer([ring; ring], 2*8192);while flag.running    pause(0.1);		% free up CPU cycles     % check for keyboard input    [ keyIsDown, secs, keyCode] = KbCheck; %#ok<ASGLU>    if keyIsDown 	% a key was pressed                % Erase all stimuli        SavedStims = ScreenStim;        SavedStims(end) = [];        Stim = ScreenStim;                switch find(keyCode, 1);	% if multiple keys pressed, only read the first (smallest) code                        case KbName('d')                ListenChar(1);                myScreenInfo.Dist = input('Enter distance between monitor and observer:');                showinstructions(myScreenInfo,grat);                ListenChar(2);            case KbName('f')                ListenChar(1);                Screen('CloseAll');                disp('Change frame rate and press Enter when you are done.');                foo = input('','s'); %#ok<NASGU>                                dist = myScreenInfo.Dist; % just in case it had been changed                myScreenInfo = ScreenInfo(RigInfo);	% recalculates framerate                myScreenInfo.Dist = dist;                   showinstructions(myScreenInfo,grat);                myScreenInfo.CalibrationLoad;                flag.stimmake = 0;                ListenChar(2);            case KbName('g')                grat = SearchStim(myScreenInfo);                                showinstructions(myScreenInfo,grat);                              visdriftsinpars = round([20 grat.tf grat.sf*10 grat.c grat.ori grat.x grat.y grat.diam]);                Stim = ScreenStim.Make(myScreenInfo,'visdriftsin', visdriftsinpars);                Play(Stim,myScreenInfo,NoSyncSquare);                ShowCursor;            case KbName('x') % was 'Esc'                % leave the program                flag.running = 0;                pnet(SenderPort, 'write','goodbye');                pnet(SenderPort, 'writePacket');             case KbName('t')                ListenChar(1);                deadTime = input('Enter dead time before each stimulus (in sec):');                ListenChar(2);            otherwise                disp('I do not recognize the key you pressed');        end         flag.stimmake = 0;    end		% if keyIsDown (a key was pressed)    % Read string    sz = pnet(ReceiverPort,'readpacket',100,'noblock');    strReceived = pnet(ReceiverPort,'read',100,char);    strCommand = sscanf(strReceived,'%s',1);        if sz>0        disp(strCommand);    end        switch strCommand        case ''                        % do nothing                    case 'hello'            flag.stiminitialized = 0;            flag.stimmake = 0;            pnet(SenderPort, 'write',strReceived);            pnet(SenderPort, 'writePacket');                    case 'stiminitialize'            % clear any old stimuli and xfile and get the new xfile name            showinstructions(myScreenInfo,grat);                        %             if ~isempty(LOADED_TEXTURES)            %                 LOADED_TEXTURES = {};            %                 fprintf('Cleared loaded textures\n');            %             end                        % Erase all stimuli            for istim = 1:length(SavedStims)                SavedStims(istim) = ScreenStim;            end            Stim = ScreenStim; % Initializes            % remove from memory the m-file (of the x-file) and persistent variables            if flag.stiminitialized                clear(eval('xfilename'));            end            xfilename = strReceived(length(strCommand)+2:end-2);            if exist(eval('xfilename'), 'file') == 2                flag.stiminitialized = 1;            else                disp(['No such stimulus file: ' xfilename '.']);                play(oRingRing);            end                        pnet(SenderPort, 'write',strReceived);            pnet(SenderPort, 'writePacket');        case 'infosave'            filename = strReceived(length(strCommand)+2:end);            if isempty(filename) || ~ischar(filename)                disp('filename should be a string');                % just waits for valid command instead of bombing out                % without cleanup            else                % the directory name is the part of string preceding the                % first underscore                underscores = strfind(filename,'_');                if ~isempty(underscores) && underscores(1)>1                    dirname = upper(filename(1:underscores(1)-1)); % make it uppercase                else                    dirname = 'noname';                end                                thefilename = fullfile(DIRS.stimInfo,dirname,filename);                fprintf('Saving screen info in %s...', thefilename);                                [status, msg] = mkdir(DIRS.stimInfo,dirname);                if ~status                    disp(msg);                    % error('Could not make log directory');                end                save(thefilename,'myScreenInfo');                                fprintf('done\n');                               % echo the string back                pnet(SenderPort, 'write',strReceived);                pnet(SenderPort, 'writePacket');            end        case 'stimmake'		% calls a single specific stimulus            % pulls it from memory if it is there, otherwise creates it from scratch            % texture pointers should be ready after this step             if ~flag.stiminitialized                disp('Cannot stimmake before stiminitialize');                pnet(SenderPort, 'write','stimproblem');                pnet(SenderPort, 'writePacket');            else                                parse_pars = strReceived(length(strCommand)+2:end);                [NewPars,npars] = sscanf(parse_pars,'%d'); %#ok<NASGU>                                % Check if a stimulus has already been saved                MakeTheStimulus = true;                                if ~isempty(Stim)                    if length(NewPars)==length(Stim.Parameters) && all(NewPars == Stim.Parameters)                                               % Easy peasy: requested Stim is equal to last Stim                        MakeTheStimulus = false;                                             else                        for iSavedStim = 1:length(SavedStims)                            if SavedStims(iSavedStim).Matches(xfilename,NewPars)                                               Stim = SavedStims(iSavedStim);                                MakeTheStimulus = false;                            end                        end                    end                end                                                                if MakeTheStimulus                                      Stim = ScreenStim.Make(myScreenInfo, xfilename, NewPars);                                  end                % Stim.Show(myScreenInfo); % for debugging purposes                                flag.stimmake = 1;                % success! To confirm this, echo the string back                pnet(SenderPort, 'write',strReceived);                pnet(SenderPort, 'writePacket');            end        case 'stimhold'            if ~isempty(Stim)                                 % first check if stim has already been saved                AlreadySaved = false;                for iSavedStim = 1:length(SavedStims)                    if SavedStims(iSavedStim).Matches(Stim.Type,NewPars)                        AlreadySaved = true;                    end                end                                if ~AlreadySaved,                    % save it                    fprintf('Saving Stim\n');                    SavedStims(end+1) = Stim; %#ok<AGROW>                end            end            % success! To confirm this,  echo the string back            pnet(SenderPort, 'write',strReceived);            pnet(SenderPort, 'writePacket');                    case 'stimplay'		% plays a single specific stimulus            if ~flag.stimmake                                disp('Cannot play a stimulus before making it');                pnet(SenderPort, 'write','stimproblem');                pnet(SenderPort, 'writePacket');                            else                                if ~exist('deadTime','var'), deadTime = 0.5; end                disp(['Waiting ' num2str(deadTime) ' seconds as requested (pre-stimulus)']);                WaitSecs(deadTime);                                 disp('Playing stimulus...');                                Play(Stim,myScreenInfo);                                WaitSecs(0.020);	% give some time for photodiode to shut off                                % success! To confirm this,  echo the string back                pnet(SenderPort, 'write',strReceived);                pnet(SenderPort, 'writePacket');                                disp(['Waiting ' num2str(deadTime) ' seconds as requested (post-stimulus)']);                WaitSecs(deadTime);                                showinstructions(myScreenInfo,grat);            end        case 'stimshow'            % it "shows" the stimulus, meaning it presents it without turning the sync boxes white and black            if ~flag.stimmake                                disp('Cannot show a stimulus before making it');                pnet(SenderPort, 'write','stimproblem');                pnet(SenderPort, 'writePacket');            else                disp('showing stimulus...');                                Play(Stim,myScreenInfo,NoSyncSquare)                % success! To confirm this,  echo the string back                pnet(SenderPort, 'write',strReceived);                pnet(SenderPort, 'writePacket');                disp('Waiting 0.5 seconds to give time to data acquisition to be done');            end        case 'stimstop'            % do nothing.             % In principle it would have stopped an ongoing stimulus...                        % echo the string back            pnet(SenderPort, 'write',strReceived);            pnet(SenderPort, 'writePacket');                    case 'bye'            disp('Bye Bye')            flag.running = 0; % exit program, tidy up..            % echo the string back            pnet(SenderPort, 'write',strReceived);            pnet(SenderPort, 'writePacket');                        % Restore preferences            Screen('Preference', 'VisualDebugLevel', oldVisualDebugLevel);            Screen('Preference', 'SuppressAllWarnings', oldSupressAllWarnings);        otherwise            fprintf('Received unknown command %s. Ignoring it.\n',strCommand);    endend%% end of program: clean upPriority(0);	% in case this was left highpnet('CloseAll'); Screen('CloseAll');ListenChar(1);			% reenable echo keypresses to matlab screenShowCursor;%%function showinstructions(myScreenInfo,grat)% showinstructions% clc;if nargin < 2    grat = [];enddisp('**************************  vs **************************');disp(' ');disp(['Screen distance is ' num2str(myScreenInfo.Dist) ' cm --- Frame rate is ' num2str(myScreenInfo.FrameRate,3) ' Hz']);disp(' ');disp('                x --- exit');disp('                d --- change screen distance');disp('                f --- change frame rate');disp('                t --- change prestimulus time');disp('                g --- interactive grating');disp(' ');disp('*********************************************************');disp(' ');if ~isempty(grat)    fprintf(...        'tf = %2.1f Hz, sf = %2.2f cpd, c = %d %%, ori = %3d deg, x = %2.1f deg, y = %2.1f deg, diam = %2.1f deg\n\n',...        grat.tf/10, grat.sf, grat.c, grat.ori,grat.x/10, grat.y/10, grat.diam/10);end